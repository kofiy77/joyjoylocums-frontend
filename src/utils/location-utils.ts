// Location utilities for postcode handling and distance calculations

// Postcode to city/town mapping
export const getPostcodeToCoordinates = (postcode: string): [number, number] => {
  // Default to London center
  const londonCenter: [number, number] = [51.5074, -0.1278];
  
  // Comprehensive UK postcode mapping
  const postcodeMap: Record<string, [number, number]> = {
    // London postcodes
    'SW1': [51.4994, -0.1347], 'SW2': [51.4517, -0.1345], 'SW3': [51.4925, -0.1687],
    'SW4': [51.4619, -0.1435], 'SW5': [51.4873, -0.1936], 'SW6': [51.4781, -0.1947],
    'SW7': [51.4946, -0.1678], 'SW8': [51.4811, -0.1347], 'SW9': [51.4619, -0.1184],
    'SW10': [51.4873, -0.1936], 'SW11': [51.4622, -0.1707], 'SW12': [51.4327, -0.1707],
    'W1': [51.5155, -0.1409], 'W2': [51.5155, -0.1866], 'W3': [51.5155, -0.2535],
    'W4': [51.4933, -0.2651], 'W5': [51.5155, -0.3048], 'W6': [51.4933, -0.2323],
    'E1': [51.5155, -0.0707], 'E2': [51.5308, -0.0707], 'E3': [51.5308, -0.0259],
    'E4': [51.5924, -0.0259], 'E5': [51.5616, -0.0556], 'E6': [51.5308, 0.0482],
    'N1': [51.5462, -0.1026], 'N2': [51.5924, -0.1690], 'N3': [51.5924, -0.1994],
    'N4': [51.5770, -0.1026], 'N5': [51.5616, -0.1026], 'N6': [51.5924, -0.1484],
    'SE1': [51.5040, -0.0871], 'SE2': [51.4886, 0.0482], 'SE3': [51.4619, -0.0025],
    'SE4': [51.4435, -0.0259], 'SE5': [51.4732, -0.0871], 'SE6': [51.4435, -0.0025],
    'NW1': [51.5308, -0.1484], 'NW2': [51.5616, -0.2139], 'NW3': [51.5462, -0.1690],
    'NW4': [51.5924, -0.2804], 'NW5': [51.5462, -0.1484], 'NW6': [51.5308, -0.1943],
    
    // Manchester postcodes
    'M1': [53.4808, -2.2426], 'M2': [53.4759, -2.2453], 'M3': [53.4871, -2.2507],
    'M4': [53.4925, -2.2361], 'M5': [53.4759, -2.2651], 'M6': [53.4871, -2.2980],
    'M7': [53.5130, -2.2980], 'M8': [53.5021, -2.2742], 'M9': [53.5130, -2.2507],
    'M10': [53.5021, -2.2273], 'M11': [53.4871, -2.2039], 'M12': [53.4759, -2.1805],
    'M13': [53.4647, -2.2039], 'M14': [53.4535, -2.2273], 'M15': [53.4647, -2.2507],
    'M16': [53.4423, -2.2507], 'M17': [53.4200, -2.2651], 'M18': [53.4311, -2.2273],
    'M19': [53.4200, -2.2039], 'M20': [53.4460, -2.2383], 'M21': [53.4311, -2.2651],
    'M22': [53.4088, -2.2507], 'M23': [53.3976, -2.2273], 'M24': [53.5130, -2.1805],
    'M25': [53.5354, -2.2039], 'M26': [53.5243, -2.1805], 'M27': [53.5354, -2.2507],
    'M28': [53.5021, -2.2980], 'M29': [53.5354, -2.2980], 'M30': [53.4647, -2.3214],
    
    // Birmingham postcodes
    'B1': [52.4862, -1.8904], 'B2': [52.4797, -1.9026], 'B3': [52.4883, -1.9026],
    'B4': [52.4862, -1.8782], 'B5': [52.4883, -1.8660], 'B6': [52.4948, -1.8782],
    'B7': [52.4948, -1.8538], 'B8': [52.4862, -1.8416], 'B9': [52.4927, -1.8294],
    'B10': [52.4732, -1.8416], 'B11': [52.4667, -1.8660], 'B12': [52.4623, -1.8904],
    'B13': [52.4558, -1.9026], 'B14': [52.4493, -1.8904], 'B15': [52.4514, -1.9148],
    'B16': [52.4797, -1.9270], 'B17': [52.4732, -1.9392], 'B18': [52.4883, -1.9514],
    'B19': [52.5013, -1.9392], 'B20': [52.5034, -1.9148], 'B21': [52.5099, -1.9270],
    
    // Liverpool postcodes
    'L1': [53.4084, -2.9916], 'L2': [53.4084, -2.9794], 'L3': [53.4149, -2.9916],
    'L4': [53.4214, -2.9672], 'L5': [53.4279, -2.9794], 'L6': [53.4149, -3.0038],
    'L7': [53.4084, -3.0282], 'L8': [53.3954, -2.9794], 'L9': [53.4493, -2.9916],
    'L10': [53.4558, -2.9794], 'L11': [53.4493, -2.9550], 'L12': [53.4623, -2.9672],
    'L13': [53.4493, -2.9306], 'L14': [53.4279, -2.9184], 'L15': [53.4084, -2.9550],
    'L16': [53.3889, -2.9184], 'L17': [53.3824, -2.9306], 'L18': [53.3693, -2.9550],
    'L19': [53.3693, -2.9794], 'L20': [53.4149, -3.0526], 'L21': [53.4558, -3.0038],
    
    // Leeds postcodes
    'LS1': [53.8008, -1.5491], 'LS2': [53.8008, -1.5613], 'LS3': [53.8073, -1.5735],
    'LS4': [53.8138, -1.5613], 'LS5': [53.8203, -1.5735], 'LS6': [53.8203, -1.5857],
    'LS7': [53.8268, -1.5735], 'LS8': [53.8268, -1.5613], 'LS9': [53.8203, -1.5491],
    'LS10': [53.7813, -1.5613], 'LS11': [53.7878, -1.5735], 'LS12': [53.7943, -1.5369],
    'LS13': [53.8073, -1.5247], 'LS14': [53.8268, -1.5369], 'LS15': [53.8203, -1.5125],
    'LS16': [53.8398, -1.5491], 'LS17': [53.8528, -1.5613], 'LS18': [53.8463, -1.5735],
    'LS19': [53.8398, -1.6101], 'LS20': [53.8593, -1.6101], 'LS25': [53.7748, -1.5125],
    
    // Sheffield postcodes
    'S1': [53.3811, -1.4701], 'S2': [53.3681, -1.4701], 'S3': [53.3941, -1.4823],
    'S4': [53.4006, -1.4579], 'S5': [53.4071, -1.4701], 'S6': [53.4006, -1.4945],
    'S7': [53.3746, -1.4945], 'S8': [53.3550, -1.4823], 'S9': [53.3941, -1.4335],
    'S10': [53.3811, -1.4945], 'S11': [53.3615, -1.4945], 'S12': [53.3550, -1.4457],
    'S13': [53.3550, -1.4091], 'S14': [53.3355, -1.4335], 'S17': [53.3159, -1.4823],
    'S20': [53.3420, -1.5189], 'S21': [53.3159, -1.5189], 'S25': [53.3485, -1.3969],
    
    // Edinburgh postcodes
    'EH1': [55.9533, -3.1883], 'EH2': [55.9598, -3.2005], 'EH3': [55.9468, -3.2127],
    'EH4': [55.9663, -3.2249], 'EH5': [55.9663, -3.1761], 'EH6': [55.9663, -3.1639],
    'EH7': [55.9533, -3.1517], 'EH8': [55.9468, -3.1639], 'EH9': [55.9403, -3.1761],
    'EH10': [55.9208, -3.1883], 'EH11': [55.9273, -3.2127], 'EH12': [55.9468, -3.2371],
    'EH13': [55.9273, -3.2493], 'EH14': [55.9078, -3.2493], 'EH15': [55.9533, -3.1273],
    'EH16': [55.9208, -3.1395], 'EH17': [55.9013, -3.1517], 'EH20': [55.8883, -3.2005],
    
    // Glasgow postcodes
    'G1': [55.8642, -4.2518], 'G2': [55.8642, -4.2640], 'G3': [55.8707, -4.2884],
    'G4': [55.8772, -4.2640], 'G5': [55.8577, -4.2640], 'G11': [55.8707, -4.3006],
    'G12': [55.8837, -4.3006], 'G13': [55.8902, -4.2884], 'G14': [55.8837, -4.3128],
    'G15': [55.9032, -4.3128], 'G20': [55.8902, -4.2762], 'G21': [55.8967, -4.2518],
    'G22': [55.9032, -4.2640], 'G23': [55.9162, -4.2762], 'G31': [55.8512, -4.2274],
    'G32': [55.8382, -4.2152], 'G33': [55.8577, -4.2030], 'G40': [55.8447, -4.2396],
    'G41': [55.8317, -4.2640], 'G42': [55.8252, -4.2518], 'G43': [55.8122, -4.2640],
    'G44': [55.8057, -4.2518], 'G45': [55.7992, -4.2152], 'G46': [55.7927, -4.2274],
    'G51': [55.8577, -4.3128], 'G52': [55.8512, -4.3250], 'G53': [55.8382, -4.3372],
    
    // Cardiff postcodes
    'CF10': [51.4816, -3.1791], 'CF11': [51.4751, -3.1913], 'CF14': [51.5011, -3.2035],
    'CF15': [51.5206, -3.2157], 'CF23': [51.4881, -3.1425], 'CF24': [51.4881, -3.1303],
    'CF3': [51.4491, -3.1669], 'CF5': [51.4751, -3.2279], 'CF72': [51.4295, -3.2279],
    
    // Newcastle postcodes
    'NE1': [54.9783, -1.6178], 'NE2': [54.9848, -1.6300], 'NE3': [54.9913, -1.6422],
    'NE4': [54.9783, -1.6422], 'NE5': [54.9913, -1.6178], 'NE6': [54.9848, -1.5934],
    'NE7': [54.9783, -1.5812], 'NE8': [54.9718, -1.5934], 'NE9': [54.9653, -1.5812],
    'NE10': [54.9588, -1.5934], 'NE11': [54.9523, -1.6056], 'NE12': [54.9978, -1.6056],
    'NE13': [55.0043, -1.6178], 'NE15': [54.9523, -1.6300], 'NE16': [54.9458, -1.6178],
    
    // Bristol postcodes
    'BS1': [51.4545, -2.5879], 'BS2': [51.4610, -2.5879], 'BS3': [51.4415, -2.6001],
    'BS4': [51.4350, -2.5757], 'BS5': [51.4610, -2.5635], 'BS6': [51.4740, -2.5879],
    'BS7': [51.4870, -2.6001], 'BS8': [51.4610, -2.6123], 'BS9': [51.4870, -2.6245],
    'BS10': [51.5065, -2.6123], 'BS11': [51.4935, -2.6489], 'BS13': [51.4155, -2.5879],
    'BS14': [51.4090, -2.6001], 'BS15': [51.4480, -2.5391], 'BS16': [51.4870, -2.5513],
    
    // Nottingham postcodes
    'NG1': [52.9548, -1.1581], 'NG2': [52.9483, -1.1703], 'NG3': [52.9613, -1.1459],
    'NG4': [52.9678, -1.1337], 'NG5': [52.9743, -1.1459], 'NG6': [52.9678, -1.1703],
    'NG7': [52.9548, -1.1825], 'NG8': [52.9418, -1.1947], 'NG9': [52.9288, -1.1703],
    'NG10': [52.9158, -1.1459], 'NG11': [52.9223, -1.1825], 'NG12': [52.8963, -1.1215],
    'NG13': [52.9028, -1.0727], 'NG14': [52.9288, -1.0727], 'NG15': [53.0003, -1.1459],
    'NG16': [53.0133, -1.1337], 'NG17': [53.0328, -1.1215], 'NG18': [53.0588, -1.1459],
    'NG19': [53.0653, -1.1581], 'NG20': [53.0783, -1.1825], 'NG21': [53.0848, -1.1459],
    
    // Leicester postcodes
    'LE1': [52.6369, -1.1397], 'LE2': [52.6239, -1.1519], 'LE3': [52.6434, -1.1641],
    'LE4': [52.6564, -1.1519], 'LE5': [52.6434, -1.1275], 'LE8': [52.5979, -1.1397],
    'LE9': [52.5849, -1.1153], 'LE10': [52.5719, -1.0665], 'LE11': [52.7674, -1.1519],
    'LE12': [52.7674, -1.2251], 'LE13': [52.6954, -0.9811], 'LE14': [52.6954, -0.9201],
    'LE15': [52.6759, -0.8591], 'LE16': [52.6434, -1.0665], 'LE17': [52.5914, -1.1641],
    'LE18': [52.5784, -1.1763], 'LE19': [52.5589, -1.1641], 'LE21': [52.6369, -1.0909],
    
    // Coventry postcodes
    'CV1': [52.4068, -1.5197], 'CV2': [52.4198, -1.5075], 'CV3': [52.3938, -1.5197],
    'CV4': [52.3808, -1.5319], 'CV5': [52.4068, -1.5441], 'CV6': [52.4328, -1.5441],
    'CV7': [52.4588, -1.5319], 'CV8': [52.2888, -1.5197], 'CV9': [52.5368, -1.5197],
    'CV10': [52.5498, -1.5319], 'CV11': [52.5368, -1.4953], 'CV12': [52.5368, -1.4709],
    'CV13': [52.2368, -1.5319], 'CV21': [52.3678, -1.2616], 'CV22': [52.3678, -1.2128],
    'CV23': [52.3548, -1.1640], 'CV31': [52.2888, -1.5563], 'CV32': [52.2758, -1.5929],
    'CV33': [52.2498, -1.6295], 'CV34': [52.1928, -1.8538], 'CV35': [52.2238, -1.7074],
    'CV36': [52.1538, -1.6783], 'CV37': [52.2238, -1.5929], 'CV47': [52.5498, -1.3958]
  };
  
  const postcodeDistrict = postcode.split(' ')[0]?.trim().toUpperCase();
  
  // Try exact match first
  if (postcodeMap[postcodeDistrict]) {
    return postcodeMap[postcodeDistrict];
  }
  
  // Try area match (e.g., "M" for any M postcode)
  const postcodeArea = postcodeDistrict?.replace(/\d.*/, '').trim();
  if (postcodeArea && postcodeMap[postcodeArea + '1']) {
    return postcodeMap[postcodeArea + '1'];
  }
  
  return londonCenter;
};

// Postcode to city/town mapping
export const getPostcodeToCity = (postcode: string): string => {
  const postcodeDistrict = postcode.split(' ')[0]?.trim().toUpperCase();
  const postcodeArea = postcodeDistrict?.replace(/\d.*/, '').trim();
  
  const cityMap: Record<string, string> = {
    // London areas
    'SW': 'London', 'W': 'London', 'E': 'London', 'N': 'London', 
    'SE': 'London', 'NW': 'London', 'EC': 'London', 'WC': 'London',
    
    // Major cities
    'M': 'Manchester',
    'B': 'Birmingham', 
    'L': 'Liverpool',
    'LS': 'Leeds',
    'S': 'Sheffield',
    'EH': 'Edinburgh',
    'G': 'Glasgow',
    'CF': 'Cardiff',
    'NE': 'Newcastle',
    'BS': 'Bristol',
    'NG': 'Nottingham',
    'LE': 'Leicester',
    'CV': 'Coventry',
    'CB': 'Cambridge',
    'OX': 'Oxford',
    'RG': 'Reading',
    'HP': 'Hemel Hempstead',
    'AL': 'St Albans',
    'LU': 'Luton',
    'MK': 'Milton Keynes',
    'NN': 'Northampton',
    'PE': 'Peterborough',
    'IP': 'Ipswich',
    'NR': 'Norwich',
    'CO': 'Colchester',
    'CM': 'Chelmsford',
    'SS': 'Southend-on-Sea',
    'RM': 'Romford',
    'DA': 'Dartford',
    'ME': 'Medway',
    'CT': 'Canterbury',
    'TN': 'Tonbridge',
    'BR': 'Bromley',
    'CR': 'Croydon',
    'SM': 'Sutton',
    'KT': 'Kingston upon Thames',
    'TW': 'Twickenham',
    'UB': 'Southall',
    'HA': 'Harrow',
    'WD': 'Watford',
    'EN': 'Enfield',
    'IG': 'Ilford',
    'E': 'London'
  };
  
  return cityMap[postcodeArea] || 'Unknown';
};

// Calculate distance between two coordinates using Haversine formula
export const calculateDistance = (
  lat1: number, 
  lon1: number, 
  lat2: number, 
  lon2: number
): number => {
  const R = 3959; // Earth's radius in miles
  const dLat = (lat2 - lat1) * (Math.PI / 180);
  const dLon = (lon2 - lon1) * (Math.PI / 180);
  const a = 
    Math.sin(dLat / 2) * Math.sin(dLat / 2) +
    Math.cos(lat1 * (Math.PI / 180)) * Math.cos(lat2 * (Math.PI / 180)) * 
    Math.sin(dLon / 2) * Math.sin(dLon / 2);
  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
  const distance = R * c;
  return Math.round(distance * 10) / 10; // Round to 1 decimal place
};

// Calculate distance between two postcodes
export const calculatePostcodeDistance = (postcode1: string, postcode2: string): number => {
  const coords1 = getPostcodeToCoordinates(postcode1);
  const coords2 = getPostcodeToCoordinates(postcode2);
  return calculateDistance(coords1[0], coords1[1], coords2[0], coords2[1]);
};

// Format distance for display
export const formatDistance = (distance: number): string => {
  if (distance < 1) {
    return `${(distance * 5280).toFixed(0)} ft`;
  }
  return `${distance.toFixed(1)} mi`;
};